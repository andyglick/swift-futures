//
//  XCTestManifests.swift
//  Futures
//
//  Copyright Â© 2019 Akis Kesoglou. Licensed under the MIT license.
//

#if !canImport(ObjectiveC)
import XCTest

extension AtomicBoundedMPMCQueueTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AtomicBoundedMPMCQueueTests = [
        ("testSync", testSync),
        ("testThreaded", testThreaded),
    ]
}

extension AtomicBoundedMPSCQueueTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AtomicBoundedMPSCQueueTests = [
        ("testSync", testSync),
        ("testThreaded", testThreaded),
    ]
}

extension AtomicBoundedSPMCQueueTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AtomicBoundedSPMCQueueTests = [
        ("testSync", testSync),
        ("testThreaded", testThreaded),
    ]
}

extension AtomicBoundedSPSCQueueTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AtomicBoundedSPSCQueueTests = [
        ("testSync", testSync),
        ("testThreaded", testThreaded),
    ]
}

extension AtomicRefTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AtomicRefTests = [
        ("testCompareExchangeIfEqual", testCompareExchangeIfEqual),
        ("testCompareExchangeNotEqual", testCompareExchangeNotEqual),
        ("testCompareExchangeSelf", testCompareExchangeSelf),
        ("testDoesNotLeak", testDoesNotLeak),
        ("testStore", testStore),
    ]
}

extension AtomicUnboundedMPSCQueueTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AtomicUnboundedMPSCQueueTests = [
        ("testSync", testSync),
        ("testThreaded", testThreaded),
    ]
}

extension AtomicUnboundedSPSCQueueTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AtomicUnboundedSPSCQueueTests = [
        ("testSync", testSync),
        ("testThreaded", testThreaded),
    ]
}

extension AtomicValueTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AtomicValueTests = [
        ("testBool", testBool),
        ("testConsistency", testConsistency),
        ("testInt", testInt),
        ("testInt16", testInt16),
        ("testInt32", testInt32),
        ("testInt64", testInt64),
        ("testInt8", testInt8),
        ("testUInt", testUInt),
        ("testUInt16", testUInt16),
        ("testUInt32", testUInt32),
        ("testUInt64", testUInt64),
        ("testUInt8", testUInt8),
    ]
}

extension LockingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LockingTests = [
        ("testContented", testContented),
        ("testUncontented", testUncontented),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(AtomicBoundedMPMCQueueTests.__allTests__AtomicBoundedMPMCQueueTests),
        testCase(AtomicBoundedMPSCQueueTests.__allTests__AtomicBoundedMPSCQueueTests),
        testCase(AtomicBoundedSPMCQueueTests.__allTests__AtomicBoundedSPMCQueueTests),
        testCase(AtomicBoundedSPSCQueueTests.__allTests__AtomicBoundedSPSCQueueTests),
        testCase(AtomicRefTests.__allTests__AtomicRefTests),
        testCase(AtomicUnboundedMPSCQueueTests.__allTests__AtomicUnboundedMPSCQueueTests),
        testCase(AtomicUnboundedSPSCQueueTests.__allTests__AtomicUnboundedSPSCQueueTests),
        testCase(AtomicValueTests.__allTests__AtomicValueTests),
        testCase(LockingTests.__allTests__LockingTests),
    ]
}
#endif
