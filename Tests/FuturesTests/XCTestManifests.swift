//
//  XCTestManifests.swift
//  Futures
//
//  Copyright Â© 2019 Akis Kesoglou. Licensed under the MIT license.
//

#if !canImport(ObjectiveC)
import XCTest

extension BufferedChannelTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BufferedChannelTests = [
        ("testReceiverClose", testReceiverClose),
        ("testReceiverCloseAsync", testReceiverCloseAsync),
        ("testSenderClose", testSenderClose),
        ("testSenderCloseAsync", testSenderCloseAsync),
        ("testSendReceive", testSendReceive),
        ("testSendReceiveAsync", testSendReceiveAsync),
        ("testSPMC", testSPMC),
        ("testSPMCThreaded", testSPMCThreaded),
        ("testSPSC", testSPSC),
        ("testSPSCThreaded", testSPSCThreaded),
    ]
}

extension BufferedUnboundedChannelTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BufferedUnboundedChannelTests = [
        ("testReceiverClose", testReceiverClose),
        ("testReceiverCloseAsync", testReceiverCloseAsync),
        ("testSenderClose", testSenderClose),
        ("testSenderCloseAsync", testSenderCloseAsync),
        ("testSendReceive", testSendReceive),
        ("testSendReceiveAsync", testSendReceiveAsync),
        ("testSPMC", testSPMC),
        ("testSPMCThreaded", testSPMCThreaded),
        ("testSPSC", testSPSC),
        ("testSPSCThreaded", testSPSCThreaded),
    ]
}

extension ConcurrentQueueExecutorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ConcurrentQueueExecutorTests = [
        ("testFairness", testFairness),
    ]
}

extension FutureTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FutureTests = [
        ("testCatchError", testCatchError),
        ("testDeferred", testDeferred),
        ("testEraseToAnyFuture", testEraseToAnyFuture),
        ("testFlatMap", testFlatMap),
        ("testFlatten", testFlatten),
        ("testFlattenResult", testFlattenResult),
        ("testIgnoreOutput", testIgnoreOutput),
        ("testJoin", testJoin),
        ("testJoinAll", testJoinAll),
        ("testLazy", testLazy),
        ("testMakeFuture", testMakeFuture),
        ("testMakeReference", testMakeReference),
        ("testMakeStream", testMakeStream),
        ("testMap", testMap),
        ("testMapError", testMapError),
        ("testMapKeyPath", testMapKeyPath),
        ("testMapValue", testMapValue),
        ("testMatchEither", testMatchEither),
        ("testMatchOptional", testMatchOptional),
        ("testMatchResult", testMatchResult),
        ("testNever", testNever),
        ("testPeek", testPeek),
        ("testPollOn", testPollOn),
        ("testReady", testReady),
        ("testReplaceError", testReplaceError),
        ("testReplaceNil", testReplaceNil),
        ("testReplaceOutput", testReplaceOutput),
        ("testSelect", testSelect),
        ("testSelectAny", testSelectAny),
        ("testSetFailureType", testSetFailureType),
        ("testThen", testThen),
        ("testTryLazy", testTryLazy),
        ("testTryMap", testTryMap),
        ("testWait", testWait),
    ]
}

extension PassthroughChannelTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PassthroughChannelTests = [
        ("testReceiverClose", testReceiverClose),
        ("testReceiverCloseAsync", testReceiverCloseAsync),
        ("testSenderClose", testSenderClose),
        ("testSenderCloseAsync", testSenderCloseAsync),
        ("testSendReceive", testSendReceive),
        ("testSendReceiveAsync", testSendReceiveAsync),
        ("testSPMC", testSPMC),
        ("testSPSC", testSPSC),
    ]
}

extension ReadmeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ReadmeTests = [
        ("test42", test42),
    ]
}

extension RunLoopExecutorExecutorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RunLoopExecutorExecutorTests = [
        ("testFairness", testFairness),
    ]
}

extension SerialQueueExecutorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SerialQueueExecutorTests = [
        ("testFairness", testFairness),
    ]
}

extension SharedChannelTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SharedChannelTests = [
        ("testMPSC", testMPSC),
        ("testMPSCThreaded", testMPSCThreaded),
        ("testReceiverClose", testReceiverClose),
        ("testReceiverCloseAsync", testReceiverCloseAsync),
        ("testSenderClose", testSenderClose),
        ("testSenderCloseAsync", testSenderCloseAsync),
        ("testSendReceive", testSendReceive),
        ("testSendReceiveAsync", testSendReceiveAsync),
        ("testSPMC", testSPMC),
        ("testSPMCThreaded", testSPMCThreaded),
        ("testSPSC", testSPSC),
        ("testSPSCThreaded", testSPSCThreaded),
    ]
}

extension SharedUnboundedChannelTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SharedUnboundedChannelTests = [
        ("testMPSC", testMPSC),
        ("testMPSCThreaded", testMPSCThreaded),
        ("testReceiverClose", testReceiverClose),
        ("testReceiverCloseAsync", testReceiverCloseAsync),
        ("testSenderClose", testSenderClose),
        ("testSenderCloseAsync", testSenderCloseAsync),
        ("testSendReceive", testSendReceive),
        ("testSendReceiveAsync", testSendReceiveAsync),
        ("testSPMC", testSPMC),
        ("testSPMCThreaded", testSPMCThreaded),
        ("testSPSC", testSPSC),
        ("testSPSCThreaded", testSPSCThreaded),
    ]
}

extension StreamTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StreamTests = [
        ("testAllSatisfy", testAllSatisfy),
        ("testAppend", testAppend),
        ("testBuffer", testBuffer),
        ("testCatchError", testCatchError),
        ("testCollect", testCollect),
        ("testCompactMap", testCompactMap),
        ("testCompleteOnError", testCompleteOnError),
        ("testContains", testContains),
        ("testContainsWhere", testContainsWhere),
        ("testCount", testCount),
        ("testDropFirst", testDropFirst),
        ("testDropUntilOutput", testDropUntilOutput),
        ("testDropWhile", testDropWhile),
        ("testEmpty", testEmpty),
        ("testEnumerate", testEnumerate),
        ("testEraseToAnyMulticastStream", testEraseToAnyMulticastStream),
        ("testEraseToAnySharedStream", testEraseToAnySharedStream),
        ("testEraseToAnyStream", testEraseToAnyStream),
        ("testFilter", testFilter),
        ("testFirst", testFirst),
        ("testFirstWhere", testFirstWhere),
        ("testFlatMap", testFlatMap),
        ("testFlatten", testFlatten),
        ("testFlattenResult", testFlattenResult),
        ("testForEach", testForEach),
        ("testForward", testForward),
        ("testGenerate", testGenerate),
        ("testIgnoreOutput", testIgnoreOutput),
        ("testJoin", testJoin),
        ("testJust", testJust),
        ("testLast", testLast),
        ("testLastWhere", testLastWhere),
        ("testLatest", testLatest),
        ("testLazy", testLazy),
        ("testMakeFuture", testMakeFuture),
        ("testMakeReference", testMakeReference),
        ("testMakeStream", testMakeStream),
        ("testMap", testMap),
        ("testMapError", testMapError),
        ("testMapKeyPath", testMapKeyPath),
        ("testMapValue", testMapValue),
        ("testMatchEither", testMatchEither),
        ("testMatchOptional", testMatchOptional),
        ("testMatchResult", testMatchResult),
        ("testMerge", testMerge),
        ("testMergeAll", testMergeAll),
        ("testMulticast", testMulticast),
        ("testNever", testNever),
        ("testNext", testNext),
        ("testOptional", testOptional),
        ("testOutputAt", testOutputAt),
        ("testOutputIn", testOutputIn),
        ("testPollOn", testPollOn),
        ("testPrefix", testPrefix),
        ("testPrefixUntilOutput", testPrefixUntilOutput),
        ("testPrefixWhile", testPrefixWhile),
        ("testPrepend", testPrepend),
        ("testReduce", testReduce),
        ("testReduceInto", testReduceInto),
        ("testRemoveDuplicates", testRemoveDuplicates),
        ("testRepeat", testRepeat),
        ("testReplaceEmpty", testReplaceEmpty),
        ("testReplaceError", testReplaceError),
        ("testReplaceNil", testReplaceNil),
        ("testReplaceOutput", testReplaceOutput),
        ("testScan", testScan),
        ("testSequence", testSequence),
        ("testSetFailureType", testSetFailureType),
        ("testShare", testShare),
        ("testSwitchToLatest", testSwitchToLatest),
        ("testTryMap", testTryMap),
        ("testUnfold", testUnfold),
        ("testZip", testZip),
    ]
}

extension ThreadExecutorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ThreadExecutorTests = [
        ("testFairness", testFairness),
        ("testRunMany", testRunMany),
        ("testRunNested", testRunNested),
        ("testRunUntil", testRunUntil),
        ("testRunUntilIgnoresSpawned", testRunUntilIgnoresSpawned),
        ("testSpin", testSpin),
    ]
}

extension UnbufferedChannelTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UnbufferedChannelTests = [
        ("testReceiverClose", testReceiverClose),
        ("testReceiverCloseAsync", testReceiverCloseAsync),
        ("testSenderClose", testSenderClose),
        ("testSenderCloseAsync", testSenderCloseAsync),
        ("testSendReceive", testSendReceive),
        ("testSendReceiveAsync", testSendReceiveAsync),
        ("testSPMC", testSPMC),
        ("testSPMCThreaded", testSPMCThreaded),
        ("testSPSC", testSPSC),
        ("testSPSCThreaded", testSPSCThreaded),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(BufferedChannelTests.__allTests__BufferedChannelTests),
        testCase(BufferedUnboundedChannelTests.__allTests__BufferedUnboundedChannelTests),
        testCase(ConcurrentQueueExecutorTests.__allTests__ConcurrentQueueExecutorTests),
        testCase(FutureTests.__allTests__FutureTests),
        testCase(PassthroughChannelTests.__allTests__PassthroughChannelTests),
        testCase(ReadmeTests.__allTests__ReadmeTests),
        testCase(RunLoopExecutorExecutorTests.__allTests__RunLoopExecutorExecutorTests),
        testCase(SerialQueueExecutorTests.__allTests__SerialQueueExecutorTests),
        testCase(SharedChannelTests.__allTests__SharedChannelTests),
        testCase(SharedUnboundedChannelTests.__allTests__SharedUnboundedChannelTests),
        testCase(StreamTests.__allTests__StreamTests),
        testCase(ThreadExecutorTests.__allTests__ThreadExecutorTests),
        testCase(UnbufferedChannelTests.__allTests__UnbufferedChannelTests),
    ]
}
#endif
