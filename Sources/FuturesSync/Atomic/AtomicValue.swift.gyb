//
//  AtomicValue.swift
//  Futures
//
//  Copyright Â© 2019 Akis Kesoglou. Licensed under the MIT license.
//

import FuturesPrivate
%{
atomic_types = [
    'Bool',
    'Int', 'Int8', 'Int16', 'Int32', 'Int64',
    'UInt', 'UInt8', 'UInt16', 'UInt32', 'UInt64',
]
}%
% for type in atomic_types:

// MARK: - ${type} -

%  if type is 'Bool':
extension Swift.${type}: _CAtomicValue {
    public typealias AtomicRawValue = CAtomic${type}
    public typealias AtomicPointer = Atomic${type}Pointer
}
%  else:
extension Swift.${type}: _CAtomicInteger {
    public typealias AtomicRawValue = CAtomic${type}
    public typealias AtomicPointer = Atomic${type}Pointer
}
%  end

extension Atomic {
    @_transparent
    public static func initialize(_ ptr: Atomic${type}Pointer, to initialValue: ${type}) {
        CAtomicInitialize(ptr, initialValue)
    }

    /// Atomically loads and returns the current value of the atomic variable
    /// pointed to by the receiver. The operation is atomic *read* operation.
    ///
    /// - Parameters:
    ///     - order: The memory synchronization ordering for this operation.
    ///
    /// - Returns: The value stored in the receiver.
    @_transparent
    public static func load(_ ptr: Atomic${type}Pointer, order: AtomicLoadMemoryOrder = .seqcst) -> ${type} {
        return CAtomicLoad(ptr, order)
    }

    /// Atomically replaces the value of the atomic variable pointed to by the
    /// receiver with `desired`. The operation is atomic *write* operation.
    ///
    /// - Parameters:
    ///     - desired: The value to replace the receiver with.
    ///     - order: The memory synchronization ordering for this operation.
    @_transparent
    public static func store(_ ptr: Atomic${type}Pointer, _ desired: ${type}, order: AtomicStoreMemoryOrder = .seqcst) {
        CAtomicStore(ptr, desired, order)
    }

    /// Atomically replaces the value pointed by the receiver with `desired`
    /// and returns the value the receiver held previously. The operation is
    /// *read-modify-write* operation.
    ///
    /// - Parameters:
    ///     - desired: The value to replace the receiver with.
    ///     - order: The memory synchronization ordering for this operation.
    ///
    /// - Returns: The value previously stored in the receiver.
    @_transparent
    public static func exchange(_ ptr: Atomic${type}Pointer, _ desired: ${type}, order: AtomicMemoryOrder = .seqcst) -> ${type} {
        return CAtomicExchange(ptr, desired, order)
    }

    /// Atomically compares the value pointed to by the receiver with the
    /// value pointed to by `expected`, and if those are equal, replaces the
    /// former with `desired` (performs *read-modify-write* operation).
    /// Otherwise, loads the actual value pointed to by the receiver into
    /// `*expected` (performs *load* operation).
    ///
    /// - Parameters:
    ///     - expected: The value expected to be found in the receiver.
    ///     - desired: The value to store in the receiver if it is as expected.
    ///     - order: The memory synchronization ordering for the read-modify-write
    ///       operation if the comparison succeeds.
    ///     - loadOrder: The memory synchronization ordering for the load
    ///       operation if the comparison fails. Cannot specify stronger
    ///       ordering than `order`.
    ///
    /// - Returns: The result of the comparison: `true` if current value was
    ///     equal to `*expected`, `false` otherwise.
    @_transparent
    @discardableResult
    public static func compareExchange(
        _ ptr: Atomic${type}Pointer,
        _ expected: UnsafeMutablePointer<${type}>,
        _ desired: ${type},
        order: AtomicMemoryOrder = .seqcst,
        loadOrder: AtomicLoadMemoryOrder? = nil
    ) -> Bool {
        let loadOrder = loadOrder ?? order.strongestLoadOrder()
        return CAtomicCompareExchangeStrong(
            ptr, expected, desired, order, loadOrder
        )
    }

    /// Atomically compares the value pointed to by the receiver with the
    /// value pointed to by `expected`, and if those are equal, replaces the
    /// former with `desired` (performs *read-modify-write* operation).
    /// Otherwise, loads the actual value pointed to by the receiver into
    /// `*expected` (performs *load* operation).
    ///
    /// - Parameters:
    ///     - expected: The value expected to be found in the receiver.
    ///     - desired: The value to store in the receiver if it is as expected.
    ///     - order: The memory synchronization ordering for the read-modify-write
    ///       operation if the comparison succeeds.
    ///     - loadOrder: The memory synchronization ordering for the load
    ///       operation if the comparison fails. Cannot specify stronger
    ///       ordering than `order`.
    ///
    /// - Returns: The value actually stored in the receiver. If exchange
    ///     succeeded, this will be equal to `expected`.
    @_transparent
    @discardableResult
    public static func compareExchange(
        _ ptr: Atomic${type}Pointer,
        _ expected: ${type},
        _ desired: ${type},
        order: AtomicMemoryOrder = .seqcst,
        loadOrder: AtomicLoadMemoryOrder? = nil
    ) -> ${type} {
        var current = expected
        let loadOrder = loadOrder ?? order.strongestLoadOrder()
        _ = CAtomicCompareExchangeStrong(
            ptr, &current, desired, order, loadOrder
        )
        return current
    }

    /// Atomically compares the value pointed to by the receiver with the
    /// value pointed to by `expected`, and if those are equal, replaces the
    /// former with `desired` (performs *read-modify-write* operation).
    /// Otherwise, loads the actual value pointed to by the receiver into
    /// `*expected` (performs *load* operation).
    ///
    /// This form of compare-and-exchange is allowed to fail spuriously, that
    /// is, act as if `*current != *expected` even if they are equal. When a
    /// compare-and-exchange is in a loop, this version will yield better
    /// performance on some platforms. When a weak compare-and-exchange would
    /// require a loop and a strong one would not, the strong one is preferable.
    ///
    /// - Parameters:
    ///     - expected: The value expected to be found in the receiver.
    ///     - desired: The value to store in the receiver if it is as expected.
    ///     - order: The memory synchronization ordering for the read-modify-write
    ///       operation if the comparison succeeds.
    ///     - loadOrder: The memory synchronization ordering for the load
    ///       operation if the comparison fails. Cannot specify stronger
    ///       ordering than `order`.
    ///
    /// - Returns: The result of the comparison: `true` if current value was
    ///     equal to `*expected`, `false` otherwise.
    @_transparent
    @discardableResult
    public static func compareExchangeWeak(
        _ ptr: Atomic${type}Pointer,
        _ expected: UnsafeMutablePointer<${type}>,
        _ desired: ${type},
        order: AtomicMemoryOrder = .seqcst,
        loadOrder: AtomicLoadMemoryOrder? = nil
    ) -> Bool {
        let loadOrder = loadOrder ?? order.strongestLoadOrder()
        return CAtomicCompareExchangeWeak(
            ptr, expected, desired, order, loadOrder
        )
    }

    /// Atomically compares the value pointed to by the receiver with the
    /// value pointed to by `expected`, and if those are equal, replaces the
    /// former with `desired` (performs *read-modify-write* operation).
    /// Otherwise, loads the actual value pointed to by the receiver into
    /// `*expected` (performs *load* operation).
    ///
    /// This form of compare-and-exchange is allowed to fail spuriously, that
    /// is, act as if `*current != *expected` even if they are equal. When a
    /// compare-and-exchange is in a loop, this version will yield better
    /// performance on some platforms. When a weak compare-and-exchange would
    /// require a loop and a strong one would not, the strong one is preferable.
    ///
    /// - Parameters:
    ///     - expected: The value expected to be found in the receiver.
    ///     - desired: The value to store in the receiver if it is as expected.
    ///     - order: The memory synchronization ordering for the read-modify-write
    ///       operation if the comparison succeeds.
    ///     - loadOrder: The memory synchronization ordering for the load
    ///       operation if the comparison fails. Cannot specify stronger
    ///       ordering than `order`.
    ///
    /// - Returns: The value actually stored in the receiver. If exchange
    ///     succeeded, this will be equal to `expected`.
    @_transparent
    @discardableResult
    public static func compareExchangeWeak(
        _ ptr: Atomic${type}Pointer,
        _ expected: ${type},
        _ desired: ${type},
        order: AtomicMemoryOrder = .seqcst,
        loadOrder: AtomicLoadMemoryOrder? = nil
    ) -> ${type} {
        var current = expected
        let loadOrder = loadOrder ?? order.strongestLoadOrder()
        _ = CAtomicCompareExchangeWeak(
            ptr, &current, desired, order, loadOrder
        )
        return current
    }

    /// Atomically replaces the value pointed by the receiver with the result
    /// of bitwise `AND` between the old value of the receiver and `value`,
    /// and returns the value the receiver held previously. The operation is
    /// *read-modify-write* operation.
    ///
    /// - Parameters:
    ///     - value: The value to bitwise `AND` to the value stored in the
    ///       receiver.
    ///     - order: The memory synchronization ordering for this operation.
    ///
    /// - Returns: The value previously stored in the receiver.
    @_transparent
    @discardableResult
    public static func fetchAnd(_ ptr: Atomic${type}Pointer, _ value: ${type}, order: AtomicMemoryOrder = .seqcst) -> ${type} {
        return CAtomicFetchAnd(ptr, value, order)
    }

    /// Atomically replaces the value pointed by the receiver with the result
    /// of bitwise `OR` between the old value of the receiver and `value`, and
    /// returns the value the receiver held previously. The operation is
    /// *read-modify-write* operation.
    ///
    /// - Parameters:
    ///     - value: The value to bitwise `OR` to the value stored in the
    ///       receiver.
    ///     - order: The memory synchronization ordering for this operation.
    ///
    /// - Returns: The value previously stored in the receiver.
    @_transparent
    @discardableResult
    public static func fetchOr(_ ptr: Atomic${type}Pointer, _ value: ${type}, order: AtomicMemoryOrder = .seqcst) -> ${type} {
        return CAtomicFetchOr(ptr, value, order)
    }

    /// Atomically replaces the value pointed by the receiver with the result
    /// of bitwise `XOR` between the old value of the receiver and `value`,
    /// and returns the value the receiver held previously. The operation is
    /// *read-modify-write* operation.
    ///
    /// - Parameters:
    ///     - value: The value to bitwise `XOR` to the value stored in the
    ///       receiver.
    ///     - order: The memory synchronization ordering for this operation.
    ///
    /// - Returns: The value previously stored in the receiver.
    @_transparent
    @discardableResult
    public static func fetchXor(_ ptr: Atomic${type}Pointer, _ value: ${type}, order: AtomicMemoryOrder = .seqcst) -> ${type} {
        return CAtomicFetchXor(ptr, value, order)
    }
%  if type is not 'Bool':

    /// Atomically replaces the value pointed by the receiver with the result
    /// of addition of `value` to the old value of the receiver, and returns
    /// the value the receiver held previously. The operation is *read-modify-write*
    /// operation.
    ///
    /// For signed integer types, arithmetic is defined to use twoâs
    /// complement representation. There are no undefined results. For pointer
    /// types, the result may be an undefined address, but the operations
    /// otherwise have no undefined behavior.
    ///
    /// - Parameters:
    ///     - value: The value to add to the value stored in the receiver.
    ///     - order: The memory synchronization ordering for this operation.
    ///
    /// - Returns: The value previously stored in the receiver.
    @_transparent
    @discardableResult
    public static func fetchAdd(_ ptr: Atomic${type}Pointer, _ value: ${type}, order: AtomicMemoryOrder = .seqcst) -> ${type} {
        return CAtomicFetchAdd(ptr, value, order)
    }

    /// Atomically replaces the value pointed by the receiver with the result
    /// of subtraction of `value` to the old value of the receiver, and returns
    /// the value the receiver held previously. The operation is *read-modify-write*
    /// operation.
    ///
    /// For signed integer types, arithmetic is defined to use twoâs complement
    /// representation. There are no undefined results. For pointer types, the
    /// result may be an undefined address, but the operations otherwise have
    /// no undefined behavior.
    ///
    /// - Parameters:
    ///     - value: The value to subtract from the value stored in the receiver.
    ///     - order: The memory synchronization ordering for this operation.
    ///
    /// - Returns: The value previously stored in the receiver.
    @_transparent
    @discardableResult
    public static func fetchSub(_ ptr: Atomic${type}Pointer, _ value: ${type}, order: AtomicMemoryOrder = .seqcst) -> ${type} {
        return CAtomicFetchSub(ptr, value, order)
    }
%  end
}

// MARK: -

public final class Atomic${type} {
    public typealias Pointer = Atomic${type}Pointer
    public typealias RawValue = CAtomic${type}

%  if type is 'Bool':
    @usableFromInline var _storage = false
%  else:
    @usableFromInline var _storage: RawValue = 0
%  end

    @inlinable
    init() {}
}

extension Atomic${type} {
    @_transparent
    public convenience init(_ initialValue: RawValue) {
        self.init()
        Atomic.initialize(&_storage, to: initialValue)
    }

    /// Atomically loads and returns the current value of the atomic variable
    /// pointed to by the receiver. The operation is atomic *read* operation.
    ///
    /// - Parameters:
    ///     - order: The memory synchronization ordering for this operation.
    ///
    /// - Returns: The value stored in the receiver.
    @_transparent
    public func load(order: AtomicLoadMemoryOrder = .seqcst) -> RawValue {
        return Atomic.load(&_storage, order: order)
    }

    /// Atomically replaces the value of the atomic variable pointed to by the
    /// receiver with `desired`. The operation is atomic *write* operation.
    ///
    /// - Parameters:
    ///     - desired: The value to replace the receiver with.
    ///     - order: The memory synchronization ordering for this operation.
    @_transparent
    public func store(_ desired: RawValue, order: AtomicStoreMemoryOrder = .seqcst) {
        Atomic.store(&_storage, desired, order: order)
    }

    /// Atomically replaces the value pointed by the receiver with `desired`
    /// and returns the value the receiver held previously. The operation is
    /// *read-modify-write* operation.
    ///
    /// - Parameters:
    ///     - desired: The value to replace the receiver with.
    ///     - order: The memory synchronization ordering for this operation.
    ///
    /// - Returns: The value previously stored in the receiver.
    @_transparent
    public func exchange(_ desired: RawValue, order: AtomicMemoryOrder = .seqcst) -> RawValue {
        return Atomic.exchange(&_storage, desired, order: order)
    }

    /// Atomically compares the value pointed to by the receiver with the
    /// value pointed to by `expected`, and if those are equal, replaces the
    /// former with `desired` (performs *read-modify-write* operation).
    /// Otherwise, loads the actual value pointed to by the receiver into
    /// `*expected` (performs *load* operation).
    ///
    /// - Parameters:
    ///     - expected: The value expected to be found in the receiver.
    ///     - desired: The value to store in the receiver if it is as expected.
    ///     - order: The memory synchronization ordering for the read-modify-write
    ///       operation if the comparison succeeds.
    ///     - loadOrder: The memory synchronization ordering for the load
    ///       operation if the comparison fails. Cannot specify stronger
    ///       ordering than `order`.
    ///
    /// - Returns: The result of the comparison: `true` if current value was
    ///     equal to `*expected`, `false` otherwise.
    @_transparent
    @discardableResult
    public func compareExchange(
        _ expected: UnsafeMutablePointer<RawValue>,
        _ desired: RawValue,
        order: AtomicMemoryOrder = .seqcst,
        loadOrder: AtomicLoadMemoryOrder? = nil
    ) -> Bool {
        return Atomic.compareExchange(
            &_storage,
            expected,
            desired,
            order: order,
            loadOrder: loadOrder
        )
    }

    /// Atomically compares the value pointed to by the receiver with the
    /// value pointed to by `expected`, and if those are equal, replaces the
    /// former with `desired` (performs *read-modify-write* operation).
    /// Otherwise, loads the actual value pointed to by the receiver into
    /// `*expected` (performs *load* operation).
    ///
    /// - Parameters:
    ///     - expected: The value expected to be found in the receiver.
    ///     - desired: The value to store in the receiver if it is as expected.
    ///     - order: The memory synchronization ordering for the read-modify-write
    ///       operation if the comparison succeeds.
    ///     - loadOrder: The memory synchronization ordering for the load
    ///       operation if the comparison fails. Cannot specify stronger
    ///       ordering than `order`.
    ///
    /// - Returns: The value actually stored in the receiver. If exchange
    ///     succeeded, this will be equal to `expected`.
    @_transparent
    @discardableResult
    public func compareExchange(
        _ expected: RawValue,
        _ desired: RawValue,
        order: AtomicMemoryOrder = .seqcst,
        loadOrder: AtomicLoadMemoryOrder? = nil
    ) -> RawValue {
        return Atomic.compareExchange(
            &_storage,
            expected,
            desired,
            order: order,
            loadOrder: loadOrder
        )
    }

    /// Atomically compares the value pointed to by the receiver with the
    /// value pointed to by `expected`, and if those are equal, replaces the
    /// former with `desired` (performs *read-modify-write* operation).
    /// Otherwise, loads the actual value pointed to by the receiver into
    /// `*expected` (performs *load* operation).
    ///
    /// This form of compare-and-exchange is allowed to fail spuriously, that
    /// is, act as if `*current != *expected` even if they are equal. When a
    /// compare-and-exchange is in a loop, this version will yield better
    /// performance on some platforms. When a weak compare-and-exchange would
    /// require a loop and a strong one would not, the strong one is preferable.
    ///
    /// - Parameters:
    ///     - expected: The value expected to be found in the receiver.
    ///     - desired: The value to store in the receiver if it is as expected.
    ///     - order: The memory synchronization ordering for the read-modify-write
    ///       operation if the comparison succeeds.
    ///     - loadOrder: The memory synchronization ordering for the load
    ///       operation if the comparison fails. Cannot specify stronger
    ///       ordering than `order`.
    ///
    /// - Returns: The result of the comparison: `true` if current value was
    ///     equal to `*expected`, `false` otherwise.
    @_transparent
    @discardableResult
    public func compareExchangeWeak(
        _ expected: UnsafeMutablePointer<RawValue>,
        _ desired: RawValue,
        order: AtomicMemoryOrder = .seqcst,
        loadOrder: AtomicLoadMemoryOrder? = nil
    ) -> Bool {
        return Atomic.compareExchangeWeak(
            &_storage,
            expected,
            desired,
            order: order,
            loadOrder: loadOrder
        )
    }

    /// Atomically compares the value pointed to by the receiver with the
    /// value pointed to by `expected`, and if those are equal, replaces the
    /// former with `desired` (performs *read-modify-write* operation).
    /// Otherwise, loads the actual value pointed to by the receiver into
    /// `*expected` (performs *load* operation).
    ///
    /// This form of compare-and-exchange is allowed to fail spuriously, that
    /// is, act as if `*current != *expected` even if they are equal. When a
    /// compare-and-exchange is in a loop, this version will yield better
    /// performance on some platforms. When a weak compare-and-exchange would
    /// require a loop and a strong one would not, the strong one is preferable.
    ///
    /// - Parameters:
    ///     - expected: The value expected to be found in the receiver.
    ///     - desired: The value to store in the receiver if it is as expected.
    ///     - order: The memory synchronization ordering for the read-modify-write
    ///       operation if the comparison succeeds.
    ///     - loadOrder: The memory synchronization ordering for the load
    ///       operation if the comparison fails. Cannot specify stronger
    ///       ordering than `order`.
    ///
    /// - Returns: The value actually stored in the receiver. If exchange
    ///     succeeded, this will be equal to `expected`.
    @_transparent
    @discardableResult
    public func compareExchangeWeak(
        _ expected: RawValue,
        _ desired: RawValue,
        order: AtomicMemoryOrder = .seqcst,
        loadOrder: AtomicLoadMemoryOrder? = nil
    ) -> RawValue {
        return Atomic.compareExchangeWeak(
            &_storage,
            expected,
            desired,
            order: order,
            loadOrder: loadOrder
        )
    }

    /// Atomically replaces the value pointed by the receiver with the result
    /// of bitwise `AND` between the old value of the receiver and `value`,
    /// and returns the value the receiver held previously. The operation is
    /// *read-modify-write* operation.
    ///
    /// - Parameters:
    ///     - value: The value to bitwise `AND` to the value stored in the
    ///       receiver.
    ///     - order: The memory synchronization ordering for this operation.
    ///
    /// - Returns: The value previously stored in the receiver.
    @_transparent
    @discardableResult
    public func fetchAnd(_ value: RawValue, order: AtomicMemoryOrder = .seqcst) -> RawValue {
        return Atomic.fetchAnd(&_storage, value, order: order)
    }

    /// Atomically replaces the value pointed by the receiver with the result
    /// of bitwise `OR` between the old value of the receiver and `value`, and
    /// returns the value the receiver held previously. The operation is
    /// *read-modify-write* operation.
    ///
    /// - Parameters:
    ///     - value: The value to bitwise `OR` to the value stored in the
    ///       receiver.
    ///     - order: The memory synchronization ordering for this operation.
    ///
    /// - Returns: The value previously stored in the receiver.
    @_transparent
    @discardableResult
    public func fetchOr(_ value: RawValue, order: AtomicMemoryOrder = .seqcst) -> RawValue {
        return Atomic.fetchOr(&_storage, value, order: order)
    }

    /// Atomically replaces the value pointed by the receiver with the result
    /// of bitwise `XOR` between the old value of the receiver and `value`,
    /// and returns the value the receiver held previously. The operation is
    /// *read-modify-write* operation.
    ///
    /// - Parameters:
    ///     - value: The value to bitwise `XOR` to the value stored in the
    ///       receiver.
    ///     - order: The memory synchronization ordering for this operation.
    ///
    /// - Returns: The value previously stored in the receiver.
    @_transparent
    @discardableResult
    public func fetchXor(_ value: RawValue, order: AtomicMemoryOrder = .seqcst) -> RawValue {
        return Atomic.fetchXor(&_storage, value, order: order)
    }
%  if type is not 'Bool':

    /// Atomically replaces the value pointed by the receiver with the result
    /// of addition of `value` to the old value of the receiver, and returns
    /// the value the receiver held previously. The operation is *read-modify-write*
    /// operation.
    ///
    /// For signed integer types, arithmetic is defined to use twoâs
    /// complement representation. There are no undefined results. For pointer
    /// types, the result may be an undefined address, but the operations
    /// otherwise have no undefined behavior.
    ///
    /// - Parameters:
    ///     - value: The value to add to the value stored in the receiver.
    ///     - order: The memory synchronization ordering for this operation.
    ///
    /// - Returns: The value previously stored in the receiver.
    @_transparent
    @discardableResult
    public func fetchAdd(_ value: RawValue, order: AtomicMemoryOrder = .seqcst) -> RawValue {
        return Atomic.fetchAdd(&_storage, value, order: order)
    }

    /// Atomically replaces the value pointed by the receiver with the result
    /// of subtraction of `value` to the old value of the receiver, and returns
    /// the value the receiver held previously. The operation is *read-modify-write*
    /// operation.
    ///
    /// For signed integer types, arithmetic is defined to use twoâs complement
    /// representation. There are no undefined results. For pointer types, the
    /// result may be an undefined address, but the operations otherwise have
    /// no undefined behavior.
    ///
    /// - Parameters:
    ///     - value: The value to subtract from the value stored in the receiver.
    ///     - order: The memory synchronization ordering for this operation.
    ///
    /// - Returns: The value previously stored in the receiver.
    @_transparent
    @discardableResult
    public func fetchSub(_ value: RawValue, order: AtomicMemoryOrder = .seqcst) -> RawValue {
        return Atomic.fetchSub(&_storage, value, order: order)
    }
%  end
}
% end
